#%%
import numpy as np
from matplotlib.pyplot import plot as pt
import matplotlib.pyplot as plt
from numpy.random import exponential, binomial, gamma
from numpy import exp
from numpy import sqrt as Sqrt
from numpy import log as Log

def simulate(n, v, z, vth, f, pr, M, k,  tauv, tmax, delta_t, navgs, cz, kz, 
             tauz, tauprime, H, kmin):
    
    tavgs=[]
    cavgs=[]
    
    for _ in range(navgs):
    
        nlist=[]
        vlist=[]
        vthlist=[]
        zlist=[]
        tlist=[]
        prelist=[]
        postlist=[]
        
        tcurr=0
        ratio = 0.3
        timer = delta_t
        tprev=0
        while tcurr < tmax:
            t0=exponential(1/f) # action potential
            t1=exponential(1/(k(z, tcurr-tprev, tauprime, H, kmin)*(M-n) + 1e-6)) # site gets occupied
            t2 = timer

            if t0 < t1 and t0 < t2: # AP occurrs
                b = binomial(n, pr)
                n-=b
                z=z+cz*b
                tmin = t0
                timer-=tmin
                prelist.append(tcurr+tmin)

            elif t1<t0 and t1<t2: # add a docked vesicle
                n+=1
                tmin = t1
                timer-=tmin

            else:
                tmin=t2
                timer = delta_t
                if tcurr >= ratio*tmax:
                    nlist.append(n)
                    vlist.append(v)
                    vthlist.append(vth)
                    zlist.append(z)
                    tlist.append(tcurr)

            tprev=tcurr
            tcurr += tmin
            if v>=vth:
                postlist.append(tcurr)
                v=0

            # Update the continuous dynamics

            v = v + (-v/tauv + kz*z) * tmin
            z = z + (-z/tauz) * tmin

        Tlist = np.diff(postlist)
        Tmean = np.mean(Tlist)
        CVT2=np.var(Tlist)/Tmean**2
        FFn=np.var(nlist)/np.mean(nlist)
        FFv=np.var(vlist)/np.mean(vlist)
        
        tavgs.append(Tmean)
        cavgs.append(CVT2)
    Tmean = np.mean(tavgs)
    CVT2 = np.mean(cavgs)
    return tlist, nlist, vlist, zlist, vthlist, prelist, postlist, Tmean, CVT2, FFn, FFv

f=10
pr=0.1
M=100
H=1
tauprime=1
kmin=1

def k(z, tdiff, tauprime, H, kmin, ktype):
    def kmax(z, ktype):
        if ktype==0:
            return 100
        if ktype==1:
            return z
        if ktype==2:
            return 100*np.exp(-z)
        if ktype==3:
            pass
    return (kmax(z)-kmin)/(1+(tdiff/tauprime)**H)+kmin

tauv=1
tauz=0.1
vth=0.2
cz=10
kz=0.01

n=0 # occupied states
v=0
z=0

delta_t = 0.001
tmax = 10 # <-------------- TMAX
navgs=1

res=simulate(n, v, z, vth, f, pr, M, k, tauv, tmax, delta_t, navgs, cz, kz, 
             tauz, tauprime, H, kmin)

plt.subplot(2,1,1)
plt.plot(res[0], res[2])
plt.plot(res[0], vth*np.ones(len(res[0])), color='k')
plt.subplot(2,1,2)
plt.plot(res[0], res[3])
plt.show()
