#%%
import numpy as np
from matplotlib.pyplot import plot as pt
import matplotlib.pyplot as plt
from numpy.random import exponential, binomial, gamma
from numpy import exp
from numpy import sqrt as Sqrt
from numpy import log as Log

def simulate(n, v, w, vth, c, f, fi, w0, v0, kw, tauw, pr, M, k,  vb, tauv, tauvth, tmax, delta_t, navgs):
    
    tavgs=[]
    cavgs=[]
    
    for _ in range(navgs):
    
        nlist=[]
        vlist=[]
        vthlist=[]
        wlist=[]
        tlist=[]
        prelist=[]
        postlist=[]
        postvth=[]
        
        tcurr=0
        ratio = 0
        timer = delta_t
        while tcurr < tmax:
            t0=exponential(1/f) # action potential
            t1=exponential(1/(k*(M-n) + 1e-6)) # site gets occupied
            t2=exponential(1/fi)
            t3 = timer
    
            if t0 < t1 and t0 < t2 and t0<t3: # AP occurrs
                b = binomial(n, pr)
                n-=b
                v=v+c*b
                tmin = t0
                timer-=tmin
                prelist.append(tcurr+tmin)
    
            elif t1<t0 and t1<t2 and t1<t3: # add a docked vesicle
                n+=1
                tmin = t1
                timer-=tmin
    
            elif t2<t0 and t2<t1 and t2<t3: # add a docked vesicle
                v=v0
                w=w0
                tmin=t2
                timer-=tmin
    
            else:
                tmin=t3
                timer = delta_t
                if tcurr >= ratio*tmax:
                    nlist.append(n)
                    vlist.append(v)
                    vthlist.append(vth)
                    wlist.append(w)
                    tlist.append(tcurr)
                    
            tcurr += tmin
            if v>=vth:
                postlist.append(tcurr)
                postvth.append(vth)
                v=0
                
            # Update the continuous dynamics
    
            v += (-v / tauv) * tmin
            vth += ((vb-vth) / tauvth - kw * w) * tmin
            w += (-w/tauw)*tmin
    
        Tlist = np.diff(postlist)
        Tmean = np.mean(Tlist)
        CVT2=np.var(Tlist)/Tmean**2
        FFn=np.var(nlist)/np.mean(nlist)
        FFv=np.var(vlist)/np.mean(vlist)
        
        tavgs.append(Tmean)
        cavgs.append(CVT2)
    Tmean = np.mean(tavgs)
    CVT2 = np.mean(cavgs)
    return tlist, nlist, vlist, wlist, vthlist, prelist, postlist, Tmean, CVT2, FFn, FFv, postvth

        

# =============================================================================
#%% Test 1: Plotting simulations
f=100
fi=20
pr=0.2
M=100
k=10
tauv=0.1
tauvth=0.1

vb=0.2
vth=vb

w0=0.1
kw=1

v0=-0.1

c=0.001
tauw=1

n=0 # occupied states
v=0
w=0

delta_t = 0.001
tmax = 10 # <-------------- TMAX
navgs=1

res=simulate(n, v, w, vth, c, f, fi, w0, v0, kw, tauw, pr, M, k,  vb, tauv, tauvth, tmax, delta_t, navgs)

check = tauvth + fi*tauvth*tauw>tauw
print(check)

vtheq=vb - (fi*kw*tauvth*tauw*w0)/(1 + fi*tauw)
veq=(tauv*(c*f*k*M*pr + fi*(k + f*pr)*v0))/((k + f*pr)*(1 + fi*tauv))

vthsim=np.mean(res[4])*np.ones(len(res[0]))
vsim=np.mean(res[2])*np.ones(len(res[0]))

plt.plot(res[0], res[2], label='v')
plt.plot(res[0], res[4], color='k')
plt.plot(res[0], vtheq*np.ones(len(res[0])), label='vtheq')
plt.plot(res[0], vthsim, label='vthsim')
plt.plot(res[0], veq*np.ones(len(res[0])), label='veq')
plt.plot(res[0], vsim, label='vsim')
plt.legend()
#%%  Test 2 - firing rate eq vs sim
f=100
pr=0.1
M=100
k=10
tauv=1
c=0.01

vb=0.2
vth=vb
tauvth=1

w0=0.1
kw=1
v0=-0.1
tauw=1

n=0 # occupied states
v=0
w=0

delta_t = 0.001
tmax = 10 # <-------------- TMAX
navgs=1

check = tauvth + fi*tauvth*tauw>tauw
print(check)

filist=np.linspace(0,20,100)
ftlist=[]
for i,fi in enumerate(filist):
    print(i/len(filist))
    res=simulate(n, v, w, vth, c, f, fi, w0, v0, kw, tauw, pr, M, k,  vb, tauv, tauvth, tmax, delta_t, navgs)
    ftlist.append(res[7])

def tmean(fi):
    return (tauv*np.log((tauv*(1 + fi*tauw)*(c*f*k*M*pr + fi*(k + f*pr)*v0))/(c*f*k*M*pr*tauv*(1 + fi*tauw) + (k + f*pr)*((1 + fi*tauw)*(fi*tauv*v0 - (1 + fi*tauv)*vb) + fi*kw*tauvth*(1 + fi*tauv)*tauw*w0))))/(1 + fi*tauv)
    
teq=1/tmean(np.array(filist))
tsim=1/np.array(ftlist)

plt.scatter(filist,tsim, label='simulations', color='blue')
plt.ylabel('Postsynaptic firing rate')
plt.xlabel('Inhibitory neuron frequency')
plt.plot(filist, teq, label='theoretical', color='k', linewidth=3)
# =============================================================================
# plt.title('mse={}'.format(np.around(np.mean((teq-tsim)**2), 3)))
# =============================================================================
plt.legend()
#%% Test 3 - Noise - FT LIST IS NOISE - sweeping inhibition
f=200
pr=0.1
M=100
k=10
tauv=1
c=0.01

vb=0.2
vth=vb
tauvth=1

w0=0.1
kw=1
v0=-0.1
tauw=1

n=0 # occupied states
v=0
w=0

delta_t = 0.001
tmax = 30 # <-------------- TMAX
navgs=1

check = tauvth + fi*tauvth*tauw>tauw
print(check)

filist=np.linspace(0,100,100)
ftlist=[] # NOISE NOW
for i,fi in enumerate(filist):
    print(i/len(filist))
    res=simulate(n, v, w, vth, c, f, fi, w0, v0, kw, tauw, pr, M, k,  vb, tauv, tauvth, tmax, delta_t, navgs)
    ftlist.append(res[8])

plt.scatter(filist,ftlist, label='simulations', color='blue')
plt.ylabel('Coefficient of variation squared')
plt.xlabel('Inhibitory neuron frequency')
# =============================================================================
# plt.title('mse={}'.format(np.around(np.mean((teq-tsim)**2), 3)))
# =============================================================================
plt.legend()
#%%  Test 4 - Noise - FT LIST IS NOISE - sweeping excitation
fi=10
pr=0.1
M=100
k=10
tauv=1
c=0.01

vb=0.2
vth=vb
tauvth=1

w0=0.1
kw=1
v0=-0.1
tauw=1

n=0 # occupied states
v=0
w=0

delta_t = 0.001
tmax = 100 # <-------------- TMAX
navgs=10

check = tauvth + fi*tauvth*tauw>tauw
print(check)

flist=np.linspace(0,40,100)
ftlist=[] # NOISE NOW
for i,f in enumerate(flist):
    print(i/len(flist))
    res=simulate(n, v, w, vth, c, f, fi, w0, v0, kw, tauw, pr, M, k,  vb, tauv, tauvth, tmax, delta_t, navgs)
    ftlist.append(res[8])

plt.scatter(flist,ftlist, label='simulations', color='blue')
plt.ylabel('Coefficient of variation squared')
plt.xlabel('Excitatory neuron frequency')
# =============================================================================
# plt.title('mse={}'.format(np.around(np.mean((teq-tsim)**2), 3)))
# =============================================================================
plt.legend()
#%%  Test 5 - Noise - sweeping excitation WIP

pr=0.1
M=100
k=10
c=0.01

vb=0.2
vth=vb

w0=0.1
kw=1
v0=-0.1
tauw=1

tauvth=0.03
tauv=1

n=0 # occupied states
v=0
w=0

delta_t = 0.001
tmax = 10 # <-------------- TMAX
navgs=1

tauv = 1/(1/tauvth-fi)

def getfi(tauvth, tauv):
    return 1/tauvth - 1/tauv

fi = getfi(tauvth, tauv)

# =============================================================================
# check2 = (fi == 1/tauvth-1/tauv)
# =============================================================================
def tmean2(f):
    return (tauv*np.log((tauv*(c*f*k*M*pr*(1 + fi*tauw) + fi*(k + f*pr)*(v0 + fi*tauw*v0 + kw*tauw*w0)))/(c*f*k*M*pr*tauv*(1 + fi*tauw) + (k + f*pr)*((1 + fi*tauw)*(fi*tauv*v0 - (1 + fi*tauv)*vb) + fi*kw*tauv*tauw*w0))))/(1 + fi*tauv)

flist=np.linspace(0,100,100)
# =============================================================================
# ftlist=[] 
# for i,f in enumerate(flist):
#     print(i/len(flist))
#     res=simulate(n, v, w, vth, c, f, fi, w0, v0, kw, tauw, pr, M, k,  vb, tauv, tauvth, tmax, delta_t, navgs)
#     ftlist.append(res[8])
# 
# plt.scatter(flist,ftlist, label='simulations', color='blue')
# =============================================================================
plt.plot(flist, tmean2(flist))
plt.ylabel('Coefficient of variation squared')
plt.xlabel('Excitatory neuron frequency')
plt.legend()
